# Generated by Django 5.1.4 on 2025-06-19 08:24

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('username', models.CharField(error_messages={'unique': 'このユーザーコードは既に使用されています。'}, max_length=50, null=True, unique=True, validators=[django.contrib.auth.validators.ASCIIUsernameValidator()], verbose_name='ユーザーコード')),
                ('gender', models.CharField(blank=True, choices=[('', ''), ('0', '男性'), ('1', '女性'), ('2', 'その他')], default='0', max_length=1, null=True, verbose_name='性別')),
                ('tel_number', models.CharField(blank=True, max_length=15, validators=[django.core.validators.RegexValidator(message='半角数字のみで入力してください', regex='^[0-9]+$')], verbose_name='電話番号')),
                ('postal_cd', models.CharField(blank=True, max_length=15, validators=[django.core.validators.RegexValidator(message='半角数字7桁で入力してください', regex='^[0-9]{7}+$')], verbose_name='郵便番号')),
                ('state', models.CharField(blank=True, choices=[('', ''), ('1', '北海道'), ('2', '青森県'), ('3', '岩手県'), ('4', '宮城県'), ('5', '秋田県'), ('6', '山形県'), ('7', '福島県'), ('8', '茨城県'), ('9', '栃木県'), ('10', '群馬県'), ('11', '埼玉県'), ('12', '千葉県'), ('13', '東京都'), ('14', '神奈川県'), ('15', '新潟県'), ('16', '富山県'), ('17', '石川県'), ('18', '福井県'), ('19', '山梨県'), ('20', '長野県'), ('21', '岐阜県'), ('22', '静岡県'), ('23', '愛知県'), ('24', '三重県'), ('25', '滋賀県'), ('26', '京都府'), ('27', '大阪府'), ('28', '兵庫県'), ('29', '奈良県'), ('30', '和歌山県'), ('31', '鳥取県'), ('32', '島根県'), ('33', '岡山県'), ('34', '広島県'), ('35', '山口県'), ('36', '徳島県'), ('37', '香川県'), ('38', '愛媛県'), ('39', '高知県'), ('40', '福岡県'), ('41', '佐賀県'), ('42', '長崎県'), ('43', '熊本県'), ('44', '大分県'), ('45', '宮崎県'), ('46', '鹿児島'), ('47', '沖縄県')], max_length=2, null=True, verbose_name='都道府県')),
                ('city', models.CharField(blank=True, max_length=255, null=True, verbose_name='市区町村')),
                ('address', models.CharField(blank=True, max_length=255, null=True, verbose_name='住所')),
                ('address2', models.CharField(blank=True, max_length=255, null=True, verbose_name='住所2')),
                ('birthday', models.DateField(blank=True, null=True, verbose_name='誕生日')),
                ('privilege', models.CharField(choices=[('0', '特権'), ('1', '一般'), ('2', '参照'), ('3', 'ゲスト')], default='2', max_length=1, verbose_name='権限')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
